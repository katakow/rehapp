{"ast":null,"code":"var _jsxFileName = \"/Users/kasia/Desktop/repo/rehapp/Rehapp/ClientApp/src/components/api-authorization/Login.jsx\";\n\n/* eslint-disable no-case-declarations */\nimport React from \"react\";\nimport { Component } from \"react\";\nimport authService from \"./AuthorizeService\";\nimport { AuthenticationResultStatus } from \"./AuthorizeService\";\nimport { LoginActions, QueryParameterNames, ApplicationPaths } from \"./ApiAuthorizationConstants\";\nimport { PropTypes } from \"prop-types\"; // The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\n\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: undefined\n    };\n  }\n\n  componentDidMount() {\n    const action = this.props.action;\n\n    switch (action) {\n      case LoginActions.Login:\n        this.login(this.getReturnUrl());\n        break;\n\n      case LoginActions.LoginCallback:\n        this.processLoginCallback();\n        break;\n\n      case LoginActions.LoginFailed:\n        const params = new URLSearchParams(window.location.search);\n        const error = params.get(QueryParameterNames.Message);\n        this.setState({\n          message: error\n        });\n        break;\n\n      case LoginActions.Profile:\n        this.redirectToProfile();\n        break;\n\n      case LoginActions.Register:\n        this.redirectToRegister();\n        break;\n\n      default:\n        throw new Error(`Invalid action '${action}'`);\n    }\n  }\n\n  render() {\n    const action = this.props.action;\n    const {\n      message\n    } = this.state;\n\n    if (message) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 14\n        }\n      }, message);\n    } else {\n      switch (action) {\n        case LoginActions.Login:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 18\n            }\n          }, \"Processing login\");\n\n        case LoginActions.LoginCallback:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 18\n            }\n          }, \"Processing login callback\");\n\n        case LoginActions.Profile:\n        case LoginActions.Register:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 18\n            }\n          });\n\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    }\n  }\n\n  async login(returnUrl) {\n    const state = {\n      returnUrl\n    };\n    const result = await authService.signIn(state);\n\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        break;\n\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(returnUrl);\n        break;\n\n      case AuthenticationResultStatus.Fail:\n        this.setState({\n          message: result.message\n        });\n        break;\n\n      default:\n        throw new Error(`Invalid status result ${result.status}.`);\n    }\n  }\n\n  async processLoginCallback() {\n    const url = window.location.href;\n    const result = await authService.completeSignIn(url);\n\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        // There should not be any redirects as the only time completeSignIn finishes\n        // is when we are doing a redirect sign in flow.\n        throw new Error(\"Should not redirect.\");\n\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n\n      case AuthenticationResultStatus.Fail:\n        this.setState({\n          message: result.message\n        });\n        break;\n\n      default:\n        throw new Error(`Invalid authentication result status '${result.status}'.`);\n    }\n  }\n\n  getReturnUrl(state) {\n    const params = new URLSearchParams(window.location.search);\n    const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n\n    if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n      // This is an extra check to prevent open redirects.\n      throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\");\n    }\n\n    return state && state.returnUrl || fromQuery || `${window.location.origin}/`;\n  }\n\n  redirectToRegister() {\n    this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?${QueryParameterNames.ReturnUrl}=${encodeURI(ApplicationPaths.Login)}`);\n  }\n\n  redirectToProfile() {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n\n  redirectToApiAuthorizationPath(apiAuthorizationPath) {\n    const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`; // It's important that we do a replace here so that when the user hits the back arrow on the\n    // browser they get sent back to where it was on the app instead of to an endpoint on this\n    // component.\n\n    window.location.replace(redirectUrl);\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    // It's important that we do a replace here so that we remove the callback uri with the\n    // fragment containing the tokens from the browser history.\n    window.location.replace(returnUrl);\n  }\n\n}\nLogin.propTypes = {\n  action: PropTypes.any\n};","map":{"version":3,"sources":["/Users/kasia/Desktop/repo/rehapp/Rehapp/ClientApp/src/components/api-authorization/Login.jsx"],"names":["React","Component","authService","AuthenticationResultStatus","LoginActions","QueryParameterNames","ApplicationPaths","PropTypes","Login","constructor","props","state","message","undefined","componentDidMount","action","login","getReturnUrl","LoginCallback","processLoginCallback","LoginFailed","params","URLSearchParams","window","location","search","error","get","Message","setState","Profile","redirectToProfile","Register","redirectToRegister","Error","render","returnUrl","result","signIn","status","Redirect","Success","navigateToReturnUrl","Fail","url","href","completeSignIn","fromQuery","ReturnUrl","startsWith","origin","redirectToApiAuthorizationPath","IdentityRegisterPath","encodeURI","IdentityManagePath","apiAuthorizationPath","redirectUrl","replace","propTypes","any"],"mappings":"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","sourcesContent":["/* eslint-disable no-case-declarations */\nimport React from \"react\";\nimport { Component } from \"react\";\nimport authService from \"./AuthorizeService\";\nimport { AuthenticationResultStatus } from \"./AuthorizeService\";\nimport {\n  LoginActions,\n  QueryParameterNames,\n  ApplicationPaths,\n} from \"./ApiAuthorizationConstants\";\nimport { PropTypes } from \"prop-types\";\n\n// The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: undefined,\n    };\n  }\n\n  static propTypes = {\n    action: PropTypes.any,\n  };\n\n  componentDidMount() {\n    const action = this.props.action;\n    switch (action) {\n      case LoginActions.Login:\n        this.login(this.getReturnUrl());\n        break;\n      case LoginActions.LoginCallback:\n        this.processLoginCallback();\n        break;\n      case LoginActions.LoginFailed:\n        const params = new URLSearchParams(window.location.search);\n        const error = params.get(QueryParameterNames.Message);\n        this.setState({ message: error });\n        break;\n      case LoginActions.Profile:\n        this.redirectToProfile();\n        break;\n      case LoginActions.Register:\n        this.redirectToRegister();\n        break;\n      default:\n        throw new Error(`Invalid action '${action}'`);\n    }\n  }\n\n  render() {\n    const action = this.props.action;\n    const { message } = this.state;\n\n    if (message) {\n      return <div>{message}</div>;\n    } else {\n      switch (action) {\n        case LoginActions.Login:\n          return <div>Processing login</div>;\n        case LoginActions.LoginCallback:\n          return <div>Processing login callback</div>;\n        case LoginActions.Profile:\n        case LoginActions.Register:\n          return <div></div>;\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    }\n  }\n\n  async login(returnUrl) {\n    const state = { returnUrl };\n    const result = await authService.signIn(state);\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        break;\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(returnUrl);\n        break;\n      case AuthenticationResultStatus.Fail:\n        this.setState({ message: result.message });\n        break;\n      default:\n        throw new Error(`Invalid status result ${result.status}.`);\n    }\n  }\n\n  async processLoginCallback() {\n    const url = window.location.href;\n    const result = await authService.completeSignIn(url);\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        // There should not be any redirects as the only time completeSignIn finishes\n        // is when we are doing a redirect sign in flow.\n        throw new Error(\"Should not redirect.\");\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n      case AuthenticationResultStatus.Fail:\n        this.setState({ message: result.message });\n        break;\n      default:\n        throw new Error(\n          `Invalid authentication result status '${result.status}'.`\n        );\n    }\n  }\n\n  getReturnUrl(state) {\n    const params = new URLSearchParams(window.location.search);\n    const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n    if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n      // This is an extra check to prevent open redirects.\n      throw new Error(\n        \"Invalid return url. The return url needs to have the same origin as the current page.\"\n      );\n    }\n    return (\n      (state && state.returnUrl) || fromQuery || `${window.location.origin}/`\n    );\n  }\n\n  redirectToRegister() {\n    this.redirectToApiAuthorizationPath(\n      `${ApplicationPaths.IdentityRegisterPath}?${\n        QueryParameterNames.ReturnUrl\n      }=${encodeURI(ApplicationPaths.Login)}`\n    );\n  }\n\n  redirectToProfile() {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n\n  redirectToApiAuthorizationPath(apiAuthorizationPath) {\n    const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\n    // It's important that we do a replace here so that when the user hits the back arrow on the\n    // browser they get sent back to where it was on the app instead of to an endpoint on this\n    // component.\n    window.location.replace(redirectUrl);\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    // It's important that we do a replace here so that we remove the callback uri with the\n    // fragment containing the tokens from the browser history.\n    window.location.replace(returnUrl);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}