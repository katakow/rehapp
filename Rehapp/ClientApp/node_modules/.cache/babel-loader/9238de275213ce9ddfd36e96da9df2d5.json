{"ast":null,"code":"var _jsxFileName = \"/Users/kasia/Desktop/repo/rehapp/Rehapp/ClientApp/src/components/api-authorization/Logout.jsx\";\nimport React from \"react\";\nimport { Component } from \"react\";\nimport authService from \"./AuthorizeService\";\nimport { AuthenticationResultStatus } from \"./AuthorizeService\";\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from \"./ApiAuthorizationConstants\";\nimport { PropTypes } from \"prop-types\"; // The main responsibility of this component is to handle the user's logout process.\n// This is the starting point for the logout process, which is usually initiated when a\n// user clicks on the logout button on the LoginMenu component.\n\nexport class Logout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: undefined,\n      isReady: false,\n      authenticated: false\n    };\n  }\n\n  componentDidMount() {\n    const action = this.props.action;\n\n    switch (action) {\n      case LogoutActions.Logout:\n        if (window.history.state.state.local) {\n          this.logout(this.getReturnUrl());\n        } else {\n          // This prevents regular links to <app>/authentication/logout from triggering a logout\n          this.setState({\n            isReady: true,\n            message: \"The logout was not initiated from within the page.\"\n          });\n        }\n\n        break;\n\n      case LogoutActions.LogoutCallback:\n        this.processLogoutCallback();\n        break;\n\n      case LogoutActions.LoggedOut:\n        this.setState({\n          isReady: true,\n          message: \"You successfully logged out!\"\n        });\n        break;\n\n      default:\n        throw new Error(`Invalid action '${action}'`);\n    }\n\n    this.populateAuthenticationState();\n  }\n\n  render() {\n    const {\n      isReady,\n      message\n    } = this.state;\n\n    if (!isReady) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 14\n        }\n      });\n    }\n\n    if (message) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 14\n        }\n      }, message);\n    } else {\n      const action = this.props.action;\n\n      switch (action) {\n        case LogoutActions.Logout:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 18\n            }\n          }, \"Processing logout\");\n\n        case LogoutActions.LogoutCallback:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 18\n            }\n          }, \"Processing logout callback\");\n\n        case LogoutActions.LoggedOut:\n          return /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 18\n            }\n          }, message);\n\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    }\n  }\n\n  async logout(returnUrl) {\n    const state = {\n      returnUrl\n    };\n    const isauthenticated = await authService.isAuthenticated();\n\n    if (isauthenticated) {\n      const result = await authService.signOut(state);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          break;\n\n        case AuthenticationResultStatus.Success:\n          await this.navigateToReturnUrl(returnUrl);\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          this.setState({\n            message: result.message\n          });\n          break;\n\n        default:\n          throw new Error(\"Invalid authentication result status.\");\n      }\n    } else {\n      this.setState({\n        message: \"You successfully logged out!\"\n      });\n    }\n  }\n\n  async processLogoutCallback() {\n    const url = window.location.href;\n    const result = await authService.completeSignOut(url);\n\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        // There should not be any redirects as the only time completeAuthentication finishes\n        // is when we are doing a redirect sign in flow.\n        throw new Error(\"Should not redirect.\");\n\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n\n      case AuthenticationResultStatus.Fail:\n        this.setState({\n          message: result.message\n        });\n        break;\n\n      default:\n        throw new Error(\"Invalid authentication result status.\");\n    }\n  }\n\n  async populateAuthenticationState() {\n    const authenticated = await authService.isAuthenticated();\n    this.setState({\n      isReady: true,\n      authenticated\n    });\n  }\n\n  getReturnUrl(state) {\n    const params = new URLSearchParams(window.location.search);\n    const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n\n    if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n      // This is an extra check to prevent open redirects.\n      throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\");\n    }\n\n    return state && state.returnUrl || fromQuery || `${window.location.origin}${ApplicationPaths.LoggedOut}`;\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    return window.location.replace(returnUrl);\n  }\n\n}\nLogout.propTypes = {\n  action: PropTypes.any\n};","map":{"version":3,"sources":["/Users/kasia/Desktop/repo/rehapp/Rehapp/ClientApp/src/components/api-authorization/Logout.jsx"],"names":["React","Component","authService","AuthenticationResultStatus","QueryParameterNames","LogoutActions","ApplicationPaths","PropTypes","Logout","constructor","props","state","message","undefined","isReady","authenticated","componentDidMount","action","window","history","local","logout","getReturnUrl","setState","LogoutCallback","processLogoutCallback","LoggedOut","Error","populateAuthenticationState","render","returnUrl","isauthenticated","isAuthenticated","result","signOut","status","Redirect","Success","navigateToReturnUrl","Fail","url","location","href","completeSignOut","params","URLSearchParams","search","fromQuery","get","ReturnUrl","startsWith","origin","replace","propTypes","any"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Component } from \"react\";\nimport authService from \"./AuthorizeService\";\nimport { AuthenticationResultStatus } from \"./AuthorizeService\";\nimport {\n  QueryParameterNames,\n  LogoutActions,\n  ApplicationPaths,\n} from \"./ApiAuthorizationConstants\";\nimport { PropTypes } from \"prop-types\";\n\n// The main responsibility of this component is to handle the user's logout process.\n// This is the starting point for the logout process, which is usually initiated when a\n// user clicks on the logout button on the LoginMenu component.\nexport class Logout extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: undefined,\n      isReady: false,\n      authenticated: false,\n    };\n  }\n\n  static propTypes = {\n    action: PropTypes.any,\n  };\n\n  componentDidMount() {\n    const action = this.props.action;\n    switch (action) {\n      case LogoutActions.Logout:\n        if (window.history.state.state.local) {\n          this.logout(this.getReturnUrl());\n        } else {\n          // This prevents regular links to <app>/authentication/logout from triggering a logout\n          this.setState({\n            isReady: true,\n            message: \"The logout was not initiated from within the page.\",\n          });\n        }\n        break;\n      case LogoutActions.LogoutCallback:\n        this.processLogoutCallback();\n        break;\n      case LogoutActions.LoggedOut:\n        this.setState({\n          isReady: true,\n          message: \"You successfully logged out!\",\n        });\n        break;\n      default:\n        throw new Error(`Invalid action '${action}'`);\n    }\n\n    this.populateAuthenticationState();\n  }\n\n  render() {\n    const { isReady, message } = this.state;\n    if (!isReady) {\n      return <div></div>;\n    }\n    if (message) {\n      return <div>{message}</div>;\n    } else {\n      const action = this.props.action;\n      switch (action) {\n        case LogoutActions.Logout:\n          return <div>Processing logout</div>;\n        case LogoutActions.LogoutCallback:\n          return <div>Processing logout callback</div>;\n        case LogoutActions.LoggedOut:\n          return <div>{message}</div>;\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    }\n  }\n\n  async logout(returnUrl) {\n    const state = { returnUrl };\n    const isauthenticated = await authService.isAuthenticated();\n    if (isauthenticated) {\n      const result = await authService.signOut(state);\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          break;\n        case AuthenticationResultStatus.Success:\n          await this.navigateToReturnUrl(returnUrl);\n          break;\n        case AuthenticationResultStatus.Fail:\n          this.setState({ message: result.message });\n          break;\n        default:\n          throw new Error(\"Invalid authentication result status.\");\n      }\n    } else {\n      this.setState({ message: \"You successfully logged out!\" });\n    }\n  }\n\n  async processLogoutCallback() {\n    const url = window.location.href;\n    const result = await authService.completeSignOut(url);\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        // There should not be any redirects as the only time completeAuthentication finishes\n        // is when we are doing a redirect sign in flow.\n        throw new Error(\"Should not redirect.\");\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n      case AuthenticationResultStatus.Fail:\n        this.setState({ message: result.message });\n        break;\n      default:\n        throw new Error(\"Invalid authentication result status.\");\n    }\n  }\n\n  async populateAuthenticationState() {\n    const authenticated = await authService.isAuthenticated();\n    this.setState({ isReady: true, authenticated });\n  }\n\n  getReturnUrl(state) {\n    const params = new URLSearchParams(window.location.search);\n    const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n    if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n      // This is an extra check to prevent open redirects.\n      throw new Error(\n        \"Invalid return url. The return url needs to have the same origin as the current page.\"\n      );\n    }\n    return (\n      (state && state.returnUrl) ||\n      fromQuery ||\n      `${window.location.origin}${ApplicationPaths.LoggedOut}`\n    );\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    return window.location.replace(returnUrl);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}